---
title: "Data Visulization"
format: html
---

## Set up 
```{r}
#| warning: false
#| message: false
library(readr)
library(dplyr)
library(tidyr)
library(forcats) # makes working with factors easier
library(ggplot2)
library(leaflet) # interactive maps
library(DT) # interactive tables
library(scales) # scale functions for visualization
library(janitor) # expedite cleaning and exploring data
library(viridis) # colorblind friendly color pallet
```

## Read Data
```{r}
#| warning: false
#| message: false

delta_visits_raw<-read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=edi.587.1&entityid=cda8c1384af0089b506d51ad8507641f")

colnames(delta_visits_raw)

delta_visits<-delta_visits_raw %>%  #to have all column names in same format
  clean_names()

colnames(delta_visits)



```


Exploring our data
```{r}
glimpse(delta_visits)

range(delta_visits$date)  #to see when data was collected 

```

## Cleaning and organizing data
```{r}
visit_long<-delta_visits %>%
  pivot_longer(cols = c("sm_boat", "med_boat", "lrg_boat", "bank_angler", "scientist","cars"),
               names_to= "visitor_type",
               values_to = "quantity") %>% 
  
  rename(restore_loc = eco_restore_approximate_location) %>% 
  select(-notes)

```


## Calculating daily visits by location

```{r}
daily_visits_loc<- visit_long %>%
  group_by(restore_loc, date, visitor_type) %>%
  summarize(daily_visits = sum(quantity))
```

## Plotting with `ggplot2()`

```{r}

ggplot(data = daily_visits_loc, 
       aes(x = restore_loc, 
           y = daily_visits))+
  geom_col()


```


## Choosing a different `geom_*`

```{r}
daily_visits_loc %>% 
  separate(date, c("year", "month", "day"), sep="-") %>%
  filter(daily_visits < 30,
        visitor_type %in% c("sm_boat", "med_boat", "lrg_boat")) %>%
  ggplot(aes(x = visitor_type,
             y = daily_visits)) + 
  geom_boxplot()

```

## Customizing our plot

```{r}
ggplot(daily_visits_loc,
       aes(x = restore_loc,
           y = daily_visits)) +
  geom_col(fill = "blue")
#outside the aes functioin is the looks of the plot

```



```{r}
ggplot(daily_visits_loc,
       aes(x = restore_loc,
           y = daily_visits,
           fill = visitor_type)) + 
  geom_col() + 
  labs(x = "Restoration Locations",
       y = "Number of Visits",
       fill = "Type of Visitor",
       title = "Total Visits to Restoration Sites",
       subtitle = "sum of daily visits during study period") +
  coord_flip() + 
  theme_bw() +
  theme(legend.position = "bottom",
        axis.ticks.y = element_blank()) + 
  scale_y_continuous(breaks = seq(0, 120, 20)) +
  scale_fill_viridis_d() 
#new colors

##saving plot
ggsave("../plots/visits_restore_loc_delta.png", width = 12, height = 6, units= "in")


```


## Interactive Visualizations
`DT` Package for interactive tables

```{r}

locations<-visit_long %>%
  distinct(restore_loc, .keep_all = TRUE) %>%
  select(restore_loc, latitude, longitude)


```



```{r}
datatable(locations)  ## makes an interactive table so you can search for something

```


Interactive Maps with `leaflet`

```{r}
leaflet(locations) %>% 
  addTiles() %>%
  addMarkers(lng = ~longitude,    #~ is to look for variable in your data
             lat = ~latitude,
             popup = ~restore_loc)

```


```{r}
leaflet(locations) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSTopo/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addCircleMarkers(
        lng = ~ longitude,
        lat = ~ latitude,
        popup = ~ restore_loc,
        radius = 5,
        # set fill properties
        fillColor = "salmon",
        fillOpacity = 1,
        # set stroke properties
        stroke = T,
        weight = 0.5,
        color = "white",
        opacity = 1)
```







































